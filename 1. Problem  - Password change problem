# Problem 1: Password change

Here’s a detailed solution to your problem in a .NET Core Web API (using .NET 8 as of February 27, 2025). The scenario involves a user logged into three devices with JWT access tokens and refresh tokens generated using email and password. When the user changes their password on one device, the other devices should be logged out. I'll implement this using a combination of token revocation and validation logic.

---

### Problem Breakdown

- **Current State**: 
  - User logs in on Device A, B, and C, each receiving a JWT (access token) and refresh token.
  - Tokens are tied to email/password credentials.
- **Requirement**: 
  - When the user changes their password on Device A, Devices B and C should be logged out (i.e., their tokens should become invalid).
- **Challenge**: 
  - JWTs are stateless and valid until they expire, even after a password change, unless explicitly revoked.

#### Solution Approach
1. **Track Refresh Tokens**: Store refresh tokens in a database with metadata (e.g., user ID, creation date, revocation status).
2. **Revoke Tokens on Password Change**: When the password changes, revoke all existing refresh tokens for that user except the one used on the current device (Device A).
3. **Validate Access Tokens**: Add a check to ensure the user’s password hash matches the token’s issuance context, effectively invalidating old JWTs.
4. **Force Re-authentication**: Devices B and C will fail token validation or refresh attempts, requiring re-login with the new password.

---

### Implementation in .NET 8 Web API

#### Step 1: Setup and Dependencies
```bash
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
dotnet add package Microsoft.EntityFrameworkCore.SqlServer // Use your preferred DB
```

#### Step 2: Database Model
Define entities for users and refresh tokens:

```csharp
public class User
{
    public int Id { get; set; }
    public string Email { get; set; }
    public string PasswordHash { get; set; } // Hashed password (e.g., BCrypt)
}

public class RefreshToken
{
    public int Id { get; set; }
    public string Token { get; set; }
    public int UserId { get; set; }
    public DateTime IssuedAt { get; set; }
    public DateTime ExpiresAt { get; set; }
    public bool IsRevoked { get; set; }
    public User User { get; set; }
}

public class AppDbContext : DbContext
{
    public DbSet<User> Users { get; set; }
    public DbSet<RefreshToken> RefreshTokens { get; set; }

    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }
}
```

#### Step 3: Configure Services
In `Program.cs`:

```csharp
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddControllers();
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// Configure JWT Authentication
var key = Encoding.UTF8.GetBytes("your-32-character-secret-key-here!!");
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = "https://myapi.example.com",
            ValidAudience = "https://myapi.example.com",
            IssuerSigningKey = new SymmetricSecurityKey(key),
            ClockSkew = TimeSpan.Zero // No tolerance for expired tokens
        };
    });

var app = builder.Build();

app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();

app.Run();
```

#### Step 4: Auth Controller with Token Management
```csharp
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;

[ApiController]
[Route("[controller]")]
public class AuthController : ControllerBase
{
    private readonly AppDbContext _dbContext;
    private readonly string _issuer = "https://myapi.example.com";
    private readonly string _audience = "https://myapi.example.com";
    private readonly string _key = "your-32-character-secret-key-here!!";

    public AuthController(AppDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginModel model)
    {
        var user = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == model.Email);
        if (user == null || !VerifyPassword(model.Password, user.PasswordHash))
            return Unauthorized();

        var (accessToken, refreshToken) = GenerateTokens(user);
        await StoreRefreshToken(user.Id, refreshToken);

        return Ok(new { AccessToken = accessToken, RefreshToken = refreshToken });
    }

    [HttpPost("refresh")]
    public async Task<IActionResult> Refresh([FromBody] RefreshModel model)
    {
        var token = await _dbContext.RefreshTokens
            .Include(t => t.User)
            .FirstOrDefaultAsync(t => t.Token == model.RefreshToken && !t.IsRevoked);

        if (token == null || token.ExpiresAt < DateTime.UtcNow)
            return Unauthorized("Invalid or expired refresh token");

        var (accessToken, refreshToken) = GenerateTokens(token.User);
        token.IsRevoked = true; // Revoke old refresh token
        await StoreRefreshToken(token.UserId, refreshToken);
        await _dbContext.SaveChangesAsync();

        return Ok(new { AccessToken = accessToken, RefreshToken = refreshToken });
    }

    [HttpPost("change-password")]
    [Authorize]
    public async Task<IActionResult> ChangePassword([FromBody] ChangePasswordModel model)
    {
        var userId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        var user = await _dbContext.Users.FindAsync(userId);
        if (user == null || !VerifyPassword(model.OldPassword, user.PasswordHash))
            return Unauthorized();

        // Update password
        user.PasswordHash = HashPassword(model.NewPassword);

        // Revoke all refresh tokens except the current one (if provided)
        var currentRefreshToken = HttpContext.Request.Headers["Refresh-Token"].ToString();
        var tokens = await _dbContext.RefreshTokens
            .Where(t => t.UserId == userId && !t.IsRevoked && t.Token != currentRefreshToken)
            .ToListAsync();
        tokens.ForEach(t => t.IsRevoked = true);

        await _dbContext.SaveChangesAsync();
        return Ok("Password changed successfully");
    }

    private (string AccessToken, string RefreshToken) GenerateTokens(User user)
    {
        var claims = new[]
        {
            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
            new Claim("passwordHash", user.PasswordHash) // Embed password hash for validation
        };

        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_key));
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

        var accessToken = new JwtSecurityToken(
            issuer: _issuer,
            audience: _audience,
            claims: claims,
            expires: DateTime.UtcNow.AddMinutes(15),
            signingCredentials: creds);

        var refreshToken = Convert.ToBase64String(RandomNumberGenerator.GetBytes(32));
        return (new JwtSecurityTokenHandler().WriteToken(accessToken), refreshToken);
    }

    private async Task StoreRefreshToken(int userId, string refreshToken)
    {
        await _dbContext.RefreshTokens.AddAsync(new RefreshToken
        {
            Token = refreshToken,
            UserId = userId,
            IssuedAt = DateTime.UtcNow,
            ExpiresAt = DateTime.UtcNow.AddDays(7),
            IsRevoked = false
        });
    }

    private string HashPassword(string password) => BCrypt.Net.BCrypt.HashPassword(password);
    private bool VerifyPassword(string password, string hash) => BCrypt.Net.BCrypt.Verify(password, hash);
}

public class LoginModel
{
    public string Email { get; set; }
    public string Password { get; set; }
}

public class RefreshModel
{
    public string RefreshToken { get; set; }
}

public class ChangePasswordModel
{
    public string OldPassword { get; set; }
    public string NewPassword { get; set; }
}
```

#### Step 5: Middleware for JWT Validation
Add middleware to check the password hash in the token:

```csharp
public class PasswordHashValidationMiddleware
{
    private readonly RequestDelegate _next;

    public PasswordHashValidationMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task InvokeAsync(HttpContext context, AppDbContext dbContext)
    {
        if (context.User.Identity?.IsAuthenticated == true)
        {
            var userId = int.Parse(context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            var tokenPasswordHash = context.User.FindFirst("passwordHash")?.Value;
            var user = await dbContext.Users.FindAsync(userId);

            if (user == null || user.PasswordHash != tokenPasswordHash)
            {
                context.Response.StatusCode = 401;
                await context.Response.WriteAsync("Token invalidated due to password change");
                return;
            }
        }
        await _next(context);
    }
}

public static class PasswordHashValidationMiddlewareExtensions
{
    public static IApplicationBuilder UsePasswordHashValidation(this IApplicationBuilder builder)
    {
        return builder.UseMiddleware<PasswordHashValidationMiddleware>();
    }
}

// Register in Program.cs
app.UseAuthentication();
app.UsePasswordHashValidation();
app.UseAuthorization();
```

#### Step 6: Secure Endpoint
```csharp
[ApiController]
[Route("[controller]")]
public class OrdersController : ControllerBase
{
    [HttpGet]
    [Authorize]
    public IActionResult GetOrders()
    {
        return Ok(new { Orders = new[] { "Order1", "Order2" } });
    }
}
```

---

### How It Works

#### Initial Setup
1. **User Logs In on 3 Devices**:
   - Device A: `POST /auth/login` → `{accessTokenA, refreshTokenA}`
   - Device B: `POST /auth/login` → `{accessTokenB, refreshTokenB}`
   - Device C: `POST /auth/login` → `{accessTokenC, refreshTokenC}`
   - All tokens include the user’s current `passwordHash` in claims.

2. **Normal Usage**:
   - Devices use access tokens for `GET /orders`.
   - Middleware validates `passwordHash` against the DB; all succeed.

#### Password Change on Device A
3. **User Changes Password**:
   - Device A: `POST /auth/change-password` with `{oldPassword, newPassword}` and header `Refresh-Token: refreshTokenA`.
   - Server:
     - Updates `PasswordHash` in `Users`.
     - Revokes `refreshTokenB` and `refreshTokenC` (sets `IsRevoked = true`), sparing `refreshTokenA`.
   - Response: `200 OK`.

4. **Devices B and C Try to Access**:
   - `GET /orders` with `accessTokenB` or `accessTokenC`.
   - Middleware checks `passwordHash` in token vs. DB → Mismatch → `401 Unauthorized`.
   - Attempt to refresh with `refreshTokenB` or `refreshTokenC` → `401` (revoked).

5. **Device A Continues**:
   - `refreshTokenA` is still valid; refreshes to a new access token with the updated `passwordHash`.
   - Continues accessing `GET /orders`.

6. **Devices B and C Re-login**:
   - Must use the new password to get fresh tokens.

---

### Best Practices

1. **Secure Storage**: Store `PasswordHash` with a strong algorithm (e.g., BCrypt) and refresh tokens in a secure DB.
2. **Token Rotation**: Issue new refresh tokens on each refresh for added security.
3. **HTTPS**: Enforce HTTPS to protect tokens in transit.
4. **Logging**: Log password changes and revocation events for auditing.
5. **Scalability**: Use a distributed cache (e.g., Redis) for refresh tokens in a multi-server setup.

---

### Real-World Outcome
- **Device A**: Continues seamlessly with the new password.
- **Devices B and C**: Logged out instantly (access tokens fail validation, refresh tokens revoked), forcing re-authentication with the new password.

This solution ensures security and meets your requirement using .NET 8 Web API features. Let me know if you need further clarification or enhancements!
